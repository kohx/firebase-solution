// https://firebase.google.com/docs/firestore/security/secure-data?hl=ja
// https://qiita.com/sgr-ksmt/items/a551251035f29ede2258

// [ resource ]: 現在DBに格納されているドキュメント
// [ request.resource ]: 書き込みを行った場合に期待される将来のドキュメント（の状態）

// ex)
// [ read(get, list) ] 現在のフィールドが「{name: 'mike', age: 25}」のとき
// - resource は「undefined」
// - request.resource	は「{name: 'mike',age: 25}」
// 
// [ create ] 書き込むフィールドが「{name: 'mike', age: 25}」のとき
// - resource は「undefined」
// - request.resource	 は「{name: 'mike',age: 25}」
// 
// [ update ] 現在のフィールドが「{name: 'mike', age: 25}」で書き込むフィールドが「{company: 'Foobar Inc.'}」のとき
// - resource	は「{name: 'mike',age: 25}」
// - request.resource	 は「{name: 'mike', age: 25, company: 'Foobar Inc.'}」
// 
// [ delete ] 現在のフィールドが「{name: 'mike', age: 25}」のとき
// - resource	は「{name: 'mike',age: 25}」
// - request.resource	 は「undefined」

// ガイドライン
// 「*は使わない」はアスタリスクを使わずに中までネストして小さくallowした方が強いから
// 「writeは使わない」writeって書くとdeleteも含まれてしまうからcreate、update、deleteは明示的に書くということ
// validationできなくなるのでcreate時にすべてのフィールドをつくる

// documentに必ず以下のフィールドをつける
// id: [doc id]
// userId: [owner doc id]

// 1対1にする場合は「id == userId」にする
// ドキュメント自体に権限を持たす場合は以下をつける
// docRoles: {
//   [doc id]: [role type],
//   ex)
//   [1234qwer]: 'writer',
//   [4567asdf]: 'reader',
//   [6789zxcv]: 'commenter',
// }

// request
// クライアントから受信したリクエストに関する情報を含むマップ
// auth と resource の2つ

// request.auth
// Firebase Authentication から取得した現在ログインしているユーザーに関する情報
// リクエストの認証コンテキスト
// request.auth.uid
// request.auth.token 
// request.auth.token.email

// request.resource
// 送信されたドキュメントに関する情報
// request.resource.data は送信したマップ

// resource
// データベースにすでに存在するドキュメントを参照
// delete実行の場合はrequest.resource.dataに値が入ってこないことがあるので、deleteの時にfield valueを参照したいときはresource.dataを見るのが良さそう。
// resource.id
// ドキュメントのid
// resource.data
// ドキュメントのマップ

// get()
// ドキュメントをマップに変換
// 引数にpathを渡してあげると、存在すればそのオブジェクトを返してくれる
// コレクションでは使用することができません

// exists()
// ドキュメントが存在するかどうかを確認
// 引数にpathを渡してあげると、存在しているかどうかをbool値で返してくれる
// コレクションでは使用することができません
// get(/databases/$(database)/documents/restaurants/$(restaurantId))

// getAter()
// 指定したpathのドキュメントを、 現在の書き込みリクエストが成功したという体で返却。
// トランザクションやバッジ処理による一括書き込み時のruleの検証に役に立ちます。

// getAfter()、get()やexists()
// 一度の評価(リクエスト)で呼び出せる数に制限は
// 単体では3回まで、他の関数と合わせて5回まで

// in
// xxx in yyy のようにして、xxxがyyy(のmap)に含まれているかみたいなのをチェックする
// allow read: if request.auth.uid in request.resource.data.members

// is
// データが特定の型であることを確認
// string、int、float、bool、null、timestamp、list、map
// request.resource.data.name is string

// data.size()
// フィールド数を返す
// data.keys()
// キーの配列を返す
// data.keys().hasAll
// すべての値がリストに存在する場合にtrue が返される

// request.resource.data.name == undefined;は判定できないので
// request.resource.dataもしくはresource.dataはMap型の変数なので、一度Mapからkeyだけの配列を取り出し、
// その中に対象となるfield名が 含まれない かをチェックする
// request.resource.data.keys().hasAll(['name']);
// 関数化
// function isUndefined(data, field) {
//   return !data.keys().hasAll([field]);
// }
// allow create: if isUndefined(request.resource.data, 'name');

// rule start
service cloud.firestore {
  match /databases/{database}/documents {

    //------------------------------
    // helpers
    //------------------------------
    
    function exData() {
      return resource.data;
    }

    function inData() {
      return request.resource.data;
    }

    function authId() {
      return request.auth.uid;
    }

    // ログインしているか
    function signed() {
      return request.auth != null;
    }

    // get doc path
    function getPath(paths) {
    	return path([['databases', database, 'documents'].join('/'), paths.join('/')].join('/'));
    }

    // get doc data
    function getDoc(paths) {
      return get(getPath(paths)).data;
    }   

    // exist doc
    function isExistDoc(paths) {
      return exists(getPath(paths));
    }   

    // check new doc
    function isNew() {
      return resource == null;
    }

    // check exist doc
    function isExist() {
      return resource != null;
    }

    // check user is owner
    function isOwn() {
      return signed() && authId() == exData().userId;
    }

    // check user is rsc orner
    function isOwnRsc(paths) {
      return signed() && authId() == getDoc(paths).userId;
    }

    // check user in docRoles
    function isInRoles(roles) {
      return signed() && exData().docRoles[request.auth.uid] in roles;
    }

    // check user in rsc docRoles
    function isInRscRoles(paths, roles) {
      return signed() && getDoc(paths).docRoles[request.auth.uid] in roles;
    }

    //------------------------------
    // users
    //------------------------------
    match /users/{userId} {
      allow create: if signed() && isNew() && validation();
      allow update: if isExist() && isOwn() && validation();
      allow delete: if isExist() && isOwn()
      allow read: if signed() && isExist();

      // validation
      function validation(){
        return 
          inData().id is string
          && inData().userId is string
          && inData().first is string
          && inData().last is string
          ;
      }
    }

    //------------------------------
    // rooms
    //------------------------------
    match /rooms/{roomId} {
      allow create: if isNew() && signed();
      allow update: if isExist() && isOwn();
      allow delete: if isExist() && isOwn();
      allow read: if isExist();

      match /messages/{messageId} {
        allow create: if isNew() && isExistDoc(['rooms', roomId]);
  //                          && request.resource.data.keys().hasAll(["datetime", "content", "userId"])
  //                          && request.resource.data.size() == 3
  //                          && request.resource.data.datetime is timestamp
  //                          && request.time < request.resource.data.datetime + duration.value(1, 'm')
  //                          && request.resource.data.content is string
  //                          && request.resource.data.userId is string;
  //     allow update: if exists(/databases/$(database)/documents/users/$(request.auth.uid)/rooms/$(roomId))
  //                          && request.resource.data.keys().hasAll(["read"])
  //                          && request.resource.data.read is bool
  //                          && resource.data.datetime == request.resource.data.datetime
  //                          && resource.data.content == request.resource.data.content
  //                          && resource.data.userId == request.resource.data.userId
  //                          && request.resource.data.size() == 4;
  //   }
        allow read: if isExist();
      }
    }

    //------------------------------
    // restaurants
    //------------------------------
    match /restaurants/{restaurantId} {
      allow create: if signed() && isNew() && createValidation();
      allow update: if (isOwn() || isInRoles(['writer'])) && isExist() && updateValidation();
      allow delete: if isOwn() && isExist();
      allow read: if (isOwn() || isInRoles(['writer', 'commenter', 'reader'])) && isExist();

      // create validation
      function createValidation(){
          return 
            inData().id is string
            && inData().userId is string
            && inData().docRoles is map
            && inData().name is string
            && inData().content is string
            && inData().numShards is int
            && inData().ratingAvg is int
            && inData().ratingTimes is int
            && inData().ratingTotal is int
            ;
      }
      
      // update validation
      function updateValidation() {
          return 
            inData().id == exData().id
            && inData().userId == exData().userId
            && isOwn() || (isInRoles(['writer', 'commenter', 'reader']) && inData().docRoles == exData().docRoles)
            && inData().name is string
            && inData().content is string
            && inData().numShards == exData().numShards
            && inData().ratingAvg == exData().ratingAvg
            && inData().ratingTimes == exData().ratingTimes
            && inData().ratingTotal == exData().ratingTotal
            && inData().size() == exData().size()
            ;
      }

      //------------------------------
      // restaurant comments
      //------------------------------
      match /comments/{commentId} {
        allow create: if isNew() && (isOwnRsc(['restaurants', restaurantId]) || isInRscRoles(['restaurants', restaurantId], ['commenter']));
        allow update: if isExist() && (isOwnRsc(['restaurants', restaurantId]) || isInRscRoles(['restaurants', restaurantId], ['commenter']));
        allow delete: if isExist() && (isOwnRsc(['restaurants', restaurantId]) || isInRscRoles(['restaurants', restaurantId], ['commenter']));
        allow read: if isExist() && (isOwnRsc(['restaurants', restaurantId]) || isInRscRoles(['restaurants', restaurantId], ['writer', 'commenter', 'reader']));
      }

      // validation
      function validation(){
        return 
          inData().id is string
          && inData().userId is string
          && inData().content is string
          ;
      }
    }

    //------------------------------
    // fcmTokens
    //------------------------------
    match /fcmTokens/{fcmTokenId} {
      allow read: if signed();
      allow update: if signed();
      allow create: if signed();
    }
  }
}
