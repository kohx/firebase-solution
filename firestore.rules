// https://firebase.google.com/docs/firestore/security/secure-data?hl=ja

// 「*は使わない」はアスタリスクを使わずに中までネストして小さくallowした方が強いから
// 「writeは使わない」writeって書くとdeleteも含まれてしまうからcreate、update、deleteは明示的に書くということ

// request
// クライアントから受信したリクエストに関する情報を含むマップ
// auth と resource の2つ

// request.auth
// Firebase Authentication から取得した現在ログインしているユーザーに関する情報
// リクエストの認証コンテキスト
// request.auth.uid
// request.auth.token 
// request.auth.token.email

// request.resource
// 送信されたドキュメントに関する情報
// request.resource.data は送信したマップ

// resource
// データベースにすでに存在するドキュメントを参照
// delete実行の場合はrequest.resource.dataに値が入ってこないことがあるので、deleteの時にfield valueを参照したいときはresource.dataを見るのが良さそう。
// resource.id
// ドキュメントのid
// resource.data
// ドキュメントのマップ

// get()
// ドキュメントをマップに変換
// 引数にpathを渡してあげると、存在すればそのオブジェクトを返してくれる
// コレクションでは使用することができません

// exists()
// ドキュメントが存在するかどうかを確認
// 引数にpathを渡してあげると、存在しているかどうかをbool値で返してくれる
// コレクションでは使用することができません
// get(/databases/$(database)/documents/restaurants/$(restaurantsId))

// getAter()
// 指定したpathのドキュメントを、 現在の書き込みリクエストが成功したという体で返却。
// トランザクションやバッジ処理による一括書き込み時のruleの検証に役に立ちます。

// getAfter()、get()やexists()
// 一度の評価(リクエスト)で呼び出せる数に制限は
// 単体では3回まで、他の関数と合わせて5回まで

// in
// xxx in yyy のようにして、xxxがyyy(のmap)に含まれているかみたいなのをチェックする
// allow read: if request.auth.uid in request.resource.data.members

// is
// データが特定の型であることを確認
// string、int、float、bool、null、timestamp、list、map
// request.resource.data.name is string

// data.size()
// フィールド数を返す
// data.keys()
// キーの配列を返す
// data.keys().hasAll
// すべての値がリストに存在する場合にtrue が返される

// request.resource.data.name == undefined;は判定できないので
// request.resource.dataもしくはresource.dataはMap型の変数なので、一度Mapからkeyだけの配列を取り出し、
// その中に対象となるfield名が 含まれない かをチェックする
// request.resource.data.keys().hasAll(['name']);
// 関数化
// function isUndefined(data, field) {
//   return !data.keys().hasAll([field]);
// }
// allow create: if isUndefined(request.resource.data, 'name');

// rule start
service cloud.firestore {
  match /databases/{database}/documents {

    // ユーザID 必ずisSignedIn()のあと
    function userId() {
      return request.auth.uid;
    }

    // ログインしているか
    function isSignedIn() {
      return request.auth != null;
    }

    // サインインしているユーザのIDかどうかをチェック
    function isSignedInUid(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // リクエストリソースデータのユーザのロールが引数のロールと等しいかチェック
    function sendUserRoleIs(role) {
      return isSignedIn() && request.resource.data.roles[userId()] == role;
    }

    // リソース
    // 保存されているリソースが空家チェック
    function savedResourceIsNull(rsc) {
      return rsc == null;
    }

    // リソースドキュメントのロールの中に引数のロールが含まれるかをチェック
    function isOneOfRoles(rsc, roles) {
      return isSignedIn() && rsc.data.roles[userId()] in roles;
    }

    // レストランのリソースを取得
    function getRestaurantDoc(restaurantsId) {
      return get(/databases/$(database)/documents/restaurants/$(restaurantsId));
    }

    // レストランのコメントのリソースを取得
    function getRestaurantCommentDoc(commentId) {
      return get(/databases/$(database)/documents/restaurants/$(restaurantsId)/comments/$(commentId));
    }
  
    match /restaurants/{restaurantsId} {

      // name、rolesの変更、フィールドの追加はできない
      function onlyContentChanged() {
          return request.resource.data.name == resource.data.name
            && request.resource.data.roles == resource.data.roles
            && request.resource.size() == resource.size();
      }

      allow create: if savedResourceIsNull(resource) && sendUserRoleIs('owner');
      allow update: if isOneOfRoles(resource, ['owner']) || (isOneOfRoles(resource, ['writer']) && onlyContentChanged());
      allow delete: if isOneOfRoles(resource, ['owner']);
      allow read:   if isOneOfRoles(resource, ['owner', 'writer', 'commenter', 'reader']);

      match /comments/{commentId} {
        allow read:   if isOneOfRoles(getRestaurantDoc(restaurantsId), ['owner', 'writer', 'commenter', 'reader']); 
        allow create: if isOneOfRoles(getRestaurantDoc(restaurantsId), ['owner', 'writer', 'commenter', 'reader'])
                          && !getRestaurantCommentDoc(commentId).exists()
                          && isSignedInUid(request.resource.data.user);
        allow delete: if isOneOfRoles(getRestaurantDoc(restaurantsId), ['owner'])
      }
      
    }
  }
}
