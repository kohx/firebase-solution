// https://firebase.google.com/docs/firestore/security/secure-data?hl=ja

// 「*は使わない」はアスタリスクを使わずに中までネストして小さくallowした方が強いから
// 「writeは使わない」writeって書くとdeleteも含まれてしまうからcreate、update、deleteは明示的に書くということ

// request
// クライアントから受信したリクエストに関する情報を含むマップ
// auth と resource の2つ

// request.auth
// Firebase Authentication から取得した現在ログインしているユーザーに関する情報
// リクエストの認証コンテキスト
// request.auth.uid
// request.auth.token 
// request.auth.token.email

// request.resource
// 送信されたドキュメントに関する情報
// request.resource.data は送信したマップ

// resource
// データベースにすでに存在するドキュメントを参照
// delete実行の場合はrequest.resource.dataに値が入ってこないことがあるので、deleteの時にfield valueを参照したいときはresource.dataを見るのが良さそう。
// resource.id
// ドキュメントのid
// resource.data
// ドキュメントのマップ

// get()
// ドキュメントをマップに変換
// 引数にpathを渡してあげると、存在すればそのオブジェクトを返してくれる
// コレクションでは使用することができません

// exists()
// ドキュメントが存在するかどうかを確認
// 引数にpathを渡してあげると、存在しているかどうかをbool値で返してくれる
// コレクションでは使用することができません
// get(/databases/$(database)/documents/restaurants/$(restaurantsId))

// getAter()
// 指定したpathのドキュメントを、 現在の書き込みリクエストが成功したという体で返却。
// トランザクションやバッジ処理による一括書き込み時のruleの検証に役に立ちます。

// getAfter()、get()やexists()
// 一度の評価(リクエスト)で呼び出せる数に制限は
// 単体では3回まで、他の関数と合わせて5回まで

// in
// xxx in yyy のようにして、xxxがyyy(のmap)に含まれているかみたいなのをチェックする
// allow read: if request.auth.uid in request.resource.data.members

// is
// データが特定の型であることを確認
// string、int、float、bool、null、timestamp、list、map
// request.resource.data.name is string

// data.size()
// エントリ数を返す
// data.keys()
// キーの配列を返す
// data.keys().hasAll
// すべての値がリストに存在する場合にtrue が返される

// request.resource.data.name == undefined;は判定できないので
// request.resource.dataもしくはresource.dataはMap型の変数なので、一度Mapからkeyだけの配列を取り出し、
// その中に対象となるfield名が 含まれない かをチェックする
// request.resource.data.keys().hasAll(['name']);
// 関数化
// function isUndefined(data, field) {
//   return !data.keys().hasAll([field]);
// }
// allow create: if isUndefined(request.resource.data, 'name');

// rule start
service cloud.firestore {
  match /databases/{database}/documents {

    // ログインしているか
    function isSignedIn() {
      return request.auth != null;
    }

    function userId() {
        return request.auth.uid;
    }

    function isSignedInUid(userId) {
      return request.auth.uid == userId;
    }

    // 所有者がストーリーを完全に制御できるようにする単純な write ルールを追加します。
    // 以下に定義されている各関数は、ユーザーの役割と、
    // 新しい文書が有効かどうかを判断するために利用されます。
    match /restaurants/{restaurantsId} {

      // ロールのチェック
      function getRole(rsc) {
        // Read from the "roles" map in the resource (rsc).
        // リソース内の「ロール」マップから読み取ります（rsc）。
        return rsc.data.roles[request.auth.uid];
      }

      // Determine if the user is one of an array of roles
      //ユーザーがロールの配列の1つであるかどうかを確認します。
      function isOneOfRoles(rsc, array) {
        return isSignedIn() && (getRole(rsc) in array);
      }

      // ストーリーが存在せず、新しいストーリーの所有者が正しい場合に有効です。
      function isValidNewStory() {
        return 
          resource == null
          && 
          request.resource.data.roles[userId()] === 'owner';
      }

      // タイトルと役割が変更されていないこと、
      // および新しいフィールドがドキュメントに追加されていないことを確認してください。
      function onlyContentChanged() {
          return request.resource.data.title == resource.data.title
            && request.resource.data.roles == resource.data.roles
            && request.resource.size() == resource.size();
      }

      // Owners can read, write, and delete stories
      // 所有者はストーリーを読み、書き、削除できます
      // allow write: if isValidNewStory() || isOneOfRoles(resource, ['owner']);

      // Split writing into creation, deletion, and updating. Only an
      // owner can create or delete a story but a writer can update
      // story content.
      allow create: if isValidNewStory();
      allow delete: if isOneOfRoles(resource, ['owner']);
      allow update: if isOneOfRoles(resource, ['owner']) || (isOneOfRoles(resource, ['writer']) && onlyContentChanged());
      allow read: if isOneOfRoles(['owner', 'writer', 'commenter', 'reader']);

      // すべての役割のユーザーがストーリーとコメントを読むことができるルールを作成します。
      // 前のステップで定義した関数を使用することで、ルールが簡潔でわかりやすくなります。
      match /comments/{commentId} {
        // Any role can read comments.
        allow read: if isOneOfRoles(
          get(/databases/$(database)/documents/restaurants/$(restaurantsId)),
          ['owner', 'writer', 'commenter', 'reader']
        );

        // ストーリー作成者、コメント投稿者、所有者がコメントを投稿できるようにします。
        // このルールでは、コメントの所有者がリクエスト元のユーザーと一致しているかどうかも検証し、
        // ユーザーがお互いのコメントを上書きすることがないようにします。
        // Owners, writers, and commenters can create comments. The
        // user id in the comment document must match the requesting
        // user's id.
        //
        // Note: we have to use get() here to retrieve the story
        // document so that we can check the user's role.
        // 注：ストーリー文書を取得するには、get(/databases/$(database)/documents/stories/$(story))を使用して、
        // ユーザーの役割を確認できるようにする必要があります。
        allow create: if isOneOfRoles(
          get(/databases/$(database)/documents/stories/$(story)),
          ['owner', 'writer', 'commenter', 'reader']
        )
        &&
        request.resource.data.user == request.auth.uid;
      }
    }
  }
}